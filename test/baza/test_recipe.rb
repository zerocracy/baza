# frozen_string_literal: true

# MIT License
#
# Copyright (c) 2009-2024 Zerocracy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'backtrace'
require 'fileutils'
require 'loog'
require 'minitest/autorun'
require 'qbash'
require 'random-port'
require 'webmock/minitest'
require 'yaml'
require_relative '../../objects/baza'
require_relative '../../objects/baza/recipe'
require_relative '../test__helper'

# Test for Recipe.
# Author:: Yegor Bugayenko (yegor256@gmail.com)
# Copyright:: Copyright (c) 2009-2024 Yegor Bugayenko
# License:: MIT
class Baza::RecipeTest < Minitest::Test
  def setup
    fake_pgsql.exec('TRUNCATE swarm CASCADE')
  end

  def test_generates_script
    n = fake_name
    s = fake_human.swarms.add(n, "#{fake_name}/#{fake_name}", 'master', '/')
    assert_include(
      Baza::Recipe.new(s, '', '').to_bash(:release, '424242', 'us-east-1a', 'sword-fish'),
      "#!/bin/bash\n",
      "424242.dkr.ecr.us-east-1a.amazonaws.com/baza-#{n}",
      'gem \'aws-sdk-core\'',
      'cat > main.rb <<EOT_',
      '"\${uri}"',
      'release.sh'
    )
  end

  def test_generates_lite_script
    n = fake_name
    s = fake_human.swarms.add(n, "#{fake_name}/#{fake_name}", 'master', '/')
    assert_include(
      Baza::Recipe.new(s, '', '').to_lite(:release, '424242', 'us-east-1a', 'sword-fish'),
      "#!/bin/bash\n",
      "curl --silent --fail-with-body 'https://www.zerocracy.com/swarms/#{s.id}/files?"
    )
  end

  # This test verifies that the release script generated by +Baza::Recipe+
  # executes successfully in an isolated, controlled environment. It does
  # this by creating a temporary Docker image with minimal dependencies,
  # stubbing external CLI commands like aws, docker, and shutdown to prevent
  # actual system interactions, and running the release script inside a Docker
  # container. The test checks that all steps of the release process complete
  # without errors, ensuring that the script functions correctly in a clean
  # environment akin to a production setup.
  def test_runs_script
    swarm = fake_human.swarms.add('st', 'zerocracy/swarm-template', 'master', '/')
    secret = fake_name
    r = swarm.releases.start('just start', secret)
    id_rsa_file = File.join(Dir.home, '.ssh/id_rsa')
    id_rsa = File.exist?(id_rsa_file) ? File.read(id_rsa_file) : ''
    RandomPort::Pool::SINGLETON.acquire do |port|
      Dir.mktmpdir do |home|
        dock = File.join(home, '.docker')
        FileUtils.mkdir_p(dock)
        %w[aws docker shutdown].each { |f| stub_cli(dock, f) }
        sh = File.join(dock, 'recipe.sh')
        File.write(
          sh,
          Baza::Recipe.new(swarm, id_rsa, 'bucket').to_bash(
            :release, 'account', 'us-east-1', secret,
            host: "http://#{fake_docker_host}:#{port}"
          )
        )
        File.write(
          File.join(dock, 'Dockerfile'),
          "
          FROM ubuntu
          RUN apt-get -y update
          RUN apt-get -y install ssh-client git curl
          WORKDIR /r
          ENV HOME=/r
          COPY recipe.sh aws docker shutdown ./
          RUN chmod a+x recipe.sh aws docker shutdown
          RUN chown -R #{Process.uid}:#{Process.gid} /r
          ENTRYPOINT [\"/bin/bash\", \"recipe.sh\"]
          "
        )
        fake_image(dock) do |image|
          fake_front(port, loog: fake_loog) do
            fake_container(image)
          end
        end
      end
    end
    assert(swarm.releases.get(r.id).exit.zero?)
  end

  # This test is reproducing the entire destroy-and-release scenario
  # using real AWS account of the user who is running the test (locally).
  # It is expected that you have .aws/credentials file on your machine
  # and the account that is configured there has full access to all AWS
  # resources. The test should not make any hard. It just destroys the
  # function if it exists and then creates it again.
  def test_live_local_run
    creds = File.join(Dir.home, '.aws/credentials')
    skip unless File.exist?(creds)
    s = fake_human.swarms.add('st', 'zerocracy/swarm-template', 'master', '/')
    Dir.mktmpdir do |home|
      %w[curl shutdown].each { |f| stub_cli(home, f) }
      FileUtils.mkdir_p(File.join(home, '.aws'))
      FileUtils.copy(creds, File.join(home, '.aws/credentials'))
      sh = File.join(home, 'recipe.sh')
      %i[destroy release release destroy destroy].each do |step|
        File.write(
          sh,
          Baza::Recipe.new(s, '', fake_live_cfg['lambda']['bucket']).to_bash(
            step, fake_live_cfg['lambda']['account'], fake_live_cfg['lambda']['region'], 'fake'
          )
        )
        stdout = qbash("/bin/bash #{sh}", log: fake_loog)
        assert(stdout.include?('exit=0&'))
      end
    end
  end

  # This test simply tries to build a Docker image using the Dockerfile
  # that we use inside AWS Lambda function. If something is wrong in the
  # Dockerfile, this test must highlight such a problem.
  def test_build_docker_image
    Dir.mktmpdir do |home|
      ['Dockerfile', 'Gemfile', 'entry.sh', 'main.rb', 'install.sh'].each do |f|
        FileUtils.copy(
          File.join(File.join(__dir__, '../../assets/lambda'), f),
          File.join(home, f)
        )
      end
      FileUtils.mkdir_p(File.join(home, 'swarm'))
      fake_image(home) do |image|
        qbash("#{fake_docker} image inspect #{image}", log: fake_loog)
      end
    end
  end

  # This test emulates execution of a single AWS Lambda run. First, we
  # prepare all files as if we would do with the help of "release.sh". Then,
  # we build a Docker image as if it would have been built for AWS Lambda.
  # Finally, we run a container, expecting it to finish without errors,
  # processing a single job with the help of a simple judge.
  def test_local_lambda_run
    WebMock.enable_net_connect!
    fake_pgsql.exec('TRUNCATE human CASCADE')
    job = fake_job(fake_human('yegor256'))
    s = job.jobs.human.swarms.add('st', 'zerocracy/swarm-template', 'master', '/')
    RandomPort::Pool::SINGLETON.acquire(2) do |lambda_port, backend_port|
      Dir.mktmpdir do |home|
        %w[shutdown aws].each { |f| stub_cli(home, f) }
        stub_cli(home, 'curl', 'echo 200')
        sh = File.join(home, 'recipe.sh')
        File.write(
          sh,
          Baza::Recipe.new(s, '', '').to_bash(
            :release, '019644334823', 'us-east-1', 'fake',
            host: "http://#{fake_docker_host}:#{backend_port}"
          )
        )
        qbash("/bin/bash #{sh}", log: fake_loog)
        File.write(
          File.join(home, 'main.rb'),
          [
            File.read(File.join(home, 'main.rb')),
            '
            def get_object(key, file, loog)
              Dir.mktmpdir do |home|
                File.write(File.join(home, "job.json"), JSON.pretty_generate({"id" => 42, "human" => "yegor256"}))
                Archive::Zip.archive(file, File.join(home, "/."))
              end
            end
            def put_object(key, file, loog)
            end
            def send_message(id, more, hops, loog)
            end
            '
          ].join
        )
        FileUtils.mkdir_p(File.join(home, 'swarm'))
        {
          'swarm/Gemfile' => "
            source 'https://rubygems.org'
            gem 'judges'
          ",
          'swarm/entry.sh' => "
            #!/bin/bash
            set -ex
            cd \"$(dirname \"$0\")\" || exit 1
            export BUNDLE_GEMFILE=\"$(dirname \"$0\")/Gemfile\"
            bundle exec judges --version
          ",
          'swarm/install.sh' => "
            #!/bin/bash
            set -ex
            echo 'echo $@' > aws
            cp aws curl
            chmod a+x aws curl
            mv aws /var/task
            mv curl /var/task
          "
        }.each { |f, txt| File.write(File.join(home, f), txt) }
        fake_image(home) do |image|
          ret =
            fake_front(backend_port, loog: fake_loog) do
              fake_container(image, "-d -p #{lambda_port}:8080") do |container|
                wait_for { Typhoeus::Request.get("http://localhost:#{lambda_port}/test").code == 404 }
                request = Typhoeus::Request.new(
                  "http://localhost:#{lambda_port}/2015-03-31/functions/function/invocations",
                  body: JSON.pretty_generate(
                    {
                      'Records' => [
                        {
                          'messageId' => 'defd997b-4675-42fc-9f33-9457011de8b3',
                          'messageAttributes' => {
                            'job' => { 'stringValue' => job.id.to_s },
                            'hops' => { 'stringValue' => '5' },
                            'more' => { 'stringValue' => '' }
                          },
                          'body' => 'something funny...'
                        }
                      ]
                    }
                  ),
                  method: :get,
                  headers: {
                    'Content-Type' => 'application/json'
                  }
                )
                request.run
                assert_include(
                  qbash("#{fake_docker} logs #{Shellwords.escape(container)}", log: fake_loog),
                  'Unpacked ZIP',
                  'Job #42 is coming from @yegor256',
                  "Reported to #{fake_docker_host}:#{backend_port}, received HTTP #200",
                  'Job processing finished'
                )
                request.response
              end
            end
          assert_equal(200, ret.response_code, ret.response_body)
          assert_equal('"Done!"', ret.response_body, ret.response_body)
          assert_equal(1, s.invocations.each.to_a.size)
        end
      end
    end
  end

  private

  def stub_cli(home, name, content = 'echo FAKE-$(basename $0) $@')
    sh = File.join(home, name)
    File.write(sh, content)
    FileUtils.chmod('+x', sh)
  end
end
